// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  password    String
  UserTokens  UserTokens[]
  Credentials Credentials[]
  SecureNotes SecureNotes[]
  Cards       Cards[]
  Networks    Networks[]
  Documents   Documents[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model UserTokens {
  id            String   @id @default(uuid())
  User          Users    @relation(fields: [userId], references: [id])
  userId        Int
  refresh_token String
  expires_at    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Credentials {
  id        Int      @id @default(autoincrement())
  User      Users    @relation(fields: [userId], references: [id])
  userId    Int
  title     String   @db.VarChar(255)
  url       String
  username  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, title])
}

model SecureNotes {
  id        Int      @id @default(autoincrement())
  User      Users    @relation(fields: [userId], references: [id])
  userId    Int
  title     String   @db.VarChar(50)
  note      String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, title])
}

model Cards {
  id              Int      @id @default(autoincrement())
  User            Users    @relation(fields: [userId], references: [id])
  userId          Int
  title           String   @db.VarChar(50)
  number          String   @db.VarChar(16)
  placeholderName String
  securityCode    String
  expirationDate  String   @db.VarChar(5)
  password        String
  isVirtual       Boolean  @default(false)
  type            cardType @default(credit)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, title])
}

model Networks {
  id        Int      @id @default(autoincrement())
  User      Users    @relation(fields: [userId], references: [id])
  userId    Int
  name      String   @db.VarChar(50)
  password  String
  title     String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Documents {
  id          Int          @id @default(autoincrement())
  User        Users        @relation(fields: [userId], references: [id])
  userId      Int
  type        documentType
  username    String
  emitionDate String       @db.VarChar(10)
  validate    String       @db.VarChar(10)
  number      String       @db.VarChar(20)
  emiter      String       @db.VarChar(50)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum cardType {
  credit
  debit
  both
}

enum documentType {
  RG
  CNH
}
